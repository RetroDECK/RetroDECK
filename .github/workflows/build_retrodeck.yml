name: "Build RetroDECK"

on:
  push:
    branches:
      - cooker*
      - feat*
      - branch/cooker*
    paths:
      - '.github/workflows/**'
      - 'automation_tools/**'
      - 'config/**'
      - 'functions/**'
      - '*.sh'
      - 'net.retrodeck.retrodeck.yml'
      - 'net.retrodeck.retrodeck.metainfo.xml'
      - 'tools/**'
  # pull_request_target:
  #   types: [opened, synchronize, reopened]
  #   branches:
  #     - cooker*
  #     - feat/*
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - cooker*
      - feat/*

  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:

  # Build RetroDECK Job
  Build_RetroDECK:
    runs-on: retrodeck
    outputs:
      VERSION: ${{ steps.build-retrodeck.outputs.VERSION }}

    steps:
      # Remove Stuck Mounts
      - name: Remove stuck mounts
        run: |
          if [ -d "/home/ubuntu/actions-runner/_work/RetroDECK/RetroDECK/.flatpak-builder/rofiles" ]; then sudo umount -f /home/ubuntu/actions-runner/_work/RetroDECK/RetroDECK/.flatpak-builder/rofiles/*; fi
          if [ -d "$HOME/actions-run/_work/RetroDECK/RetroDECK/.flatpak-builder/rofiles" ]; then sudo umount -f $HOME/actions-run/_work/RetroDECK/RetroDECK/.flatpak-builder/rofiles/*; fi

      # Clone Repository
      - name: Clone RetroDECK repo
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v4
        with:
          submodules: true

      # Clone the target branch (eg. cooker)
      - name: Clone Target Branch
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}  # Branch target
          submodules: true

      # Because we're using pull_request_target, we need to merge the PR code
      - name: Merge and Validate PR Code
        if: github.event_name == 'pull_request_target'
        run: |
          echo "Fetching PR..."
          git fetch origin pull/${{ github.event.pull_request.number }}/head:pr
          git merge --no-ff pr || {
            echo "Merge conflict detected.";
            exit 1;
          }
          echo "Validation:"
          git branch
          git log -1 --oneline

      #TODO: remove the no-build here after tests
      # Until we add support for Flathub-beta the artifacts creation is skipped on cooker
      - name: "Build Flatpak"
        id: build-retrodeck
        run: |
          # git config --global credential.helper store
          # echo "https://${{ steps.generate-rekku-token.outputs.token }}@github.com" > ~/.git-credentials
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            /bin/bash ./retrodeck_builder.sh --cicd
          else
            /bin/bash ./retrodeck_builder.sh --cicd --no-artifacts
          fi

      # - name: Generate a token for Rekku
      #   id: generate-rekku-token
      #   uses: actions/create-github-app-token@v1
      #   with:
      #     app-id: ${{ vars.REKKU_APP_ID }}
      #     private-key: ${{ secrets.REKKU_PRIVATE_KEY }}
      #     repositories: "RetroDECK,Cooker"
      #     owner: "RetroDECK"

      # Upload artifacts for other jobs
      # OUT_FOLDER is initialized in the retrodeck_builder.sh script
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: retrodeck-artifacts
          include-hidden-files: true
          path: ${{ env.OUT_FOLDER }}/*

  GitHub-publish:
    runs-on: ubuntu-latest
    needs: Build_RetroDECK
    env:
      VERSION: ${{ needs.Build_RetroDECK.outputs.VERSION }}
    steps:

      - name: Install xmlstarlet
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet

      # Clone Repository
      - name: Clone RetroDECK repo
        uses: actions/checkout@v4

      - name: Generate a token for Rekku
        id: generate-rekku-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.REKKU_APP_ID }}
          private-key: ${{ secrets.REKKU_PRIVATE_KEY }}
          repositories: "RetroDECK,Cooker,Artifacts"
          owner: "RetroDECK"

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4.1.8

      # Getting branch name, this needs as PR should be managed in a different way
      - name: Get Branch Name
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" || "$GITHUB_EVENT_NAME" == "pull_request_target" ]]; then
            branch_name="$GITHUB_HEAD_REF"
          else
            branch_name="$GITHUB_REF_NAME"
          fi
          echo "Branch name: $branch_name"
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV      
      
      # Generates a version tag based on the event type (main branch, PR, or cooker) and sets it as output.
      - name: Generate Version Tag
        id: version-tag
        run: |

          # Ensure the actual version was successfully passed from the previous job
          if [[ -z "$VERSION" ]]; then
            echo "[ERROR] Failed to read the VERSION from GitHub environmental variables."
            exit 1
          fi

          # Determine the tag based on the GitHub event context
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" || "$GITHUB_EVENT_NAME" == "pull_request_target" ]]; then
            # Pull request tag, sanitize the source branch
            source_branch="${GITHUB_HEAD_REF//\//-}"
            TAG="PR-$source_branch-${{ github.run_id }}"
            MAKE_LATEST=false
          else
            # Other branches (cooker, main branches)
            TAG="$VERSION"
            MAKE_LATEST=true
          fi

          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "MAKE_LATEST=$MAKE_LATEST" >> $GITHUB_ENV

          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "MAKE_LATEST=$MAKE_LATEST" >> $GITHUB_OUTPUT

      # Temporary disabled as the script is broken
      # - name: "Updating release notes in metainfo"
      #   run: "automation_tools/metainfo_management.sh"

      # Get Commits Since Last Published Release (Cooker only)
      - name: Get commits since last published release
        id: get-commits
        if: github.ref != 'refs/heads/main'
        run: |
          # If this is a Pull Request
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            echo "[INFO] Pull Request detected."

            BASE_REF=${GITHUB_BASE_REF}
            echo "[INFO] Base ref: $BASE_REF"

            git fetch origin $BASE_REF
            git log origin/$BASE_REF..HEAD --pretty=format:"- %s" > commits_list.txt
            cp commits_list.txt commits_since_main.txt
          else
            # Get the latest published release tag
            LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
          
            if [ -z "$LATEST_TAG" ]; then
              echo "[INFO] No previous tag found."
              echo "- No previous release." > commits_list.txt
            else
              echo "[INFO] Latest tag: $LATEST_TAG"
              git log ${LATEST_TAG}..HEAD --pretty=format:"- %s" > commits_list.txt
            fi

            # Get the latest tag on the main branch
            LATEST_MAIN_REF=$(git tag --merged origin/main --sort=-creatordate | head -n 1 || echo "")
          
            if [ -z "$LATEST_MAIN_REF" ]; then
              echo "[INFO] No tag found on main branch."
              echo "- No main release found." > commits_since_main.txt
            else
              echo "[INFO] Latest tag on main: $LATEST_MAIN_REF"
              git log ${LATEST_MAIN_REF}..HEAD --pretty=format:"- %s" > commits_since_main.txt
            fi
          fi

          echo "COMMITS_FILE=commits_list.txt" >> $GITHUB_ENV
          echo "COMMITS_MAIN_FILE=commits_since_main.txt" >> $GITHUB_ENV

      # Generate Release Body
      - name: Generate release body text
        id: generate-body
        run: |
          RELEASE_BODY_FILE="release_body.md"
          echo "# Release Notes" > $RELEASE_BODY_FILE
          echo "This is a cooker snapshot based on [this commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }}), from branch [${{ env.BRANCH_NAME }}](https://github.com/RetroDECK/RetroDECK/tree/feat/${{ env.BRANCH_NAME }})." >> $RELEASE_BODY_FILE
          echo "" >> $RELEASE_BODY_FILE

          # Append changelog from metainfo
          echo "## Changelog" >> $RELEASE_BODY_FILE
          xmlstarlet sel -t -v "/component/releases/release[1]/description//text()" ./net.retrodeck.retrodeck.metainfo.xml \
            | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' \
            | awk 'NF' \
            | sed -E '
              s/^[[:space:]]*(.*[^[:space:]]):$/### \1/;
              t title
              s/^/- / 
              :title
            ' >> $RELEASE_BODY_FILE

          # Fetch latest main to compare against
          git fetch origin main

          # Build comparison link
          COMPARE_URL="https://github.com/${{ github.repository }}/compare/main...${{ github.sha }}"

          # Append comparison link to release body
          echo "" >> $RELEASE_BODY_FILE
          echo "---" >> $RELEASE_BODY_FILE
          echo "" >> $RELEASE_BODY_FILE
          echo "[Check changes since latest main release](${COMPARE_URL})" >> $RELEASE_BODY_FILE
          echo "" >> $RELEASE_BODY_FILE

          # Output the final body
          echo "RELEASE_BODY<<EOF" >> $GITHUB_OUTPUT
          cat $RELEASE_BODY_FILE >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

    
      # Determine if Target Repository is Main or not, in that case is a Cooker build
      - name: Determine target repository
        id: set-repo
        run: |
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            echo "REPO_NAME=RetroDECK" >> $GITHUB_ENV
          else
            echo "REPO_NAME=Cooker" >> $GITHUB_ENV
          fi

      # Publish Release
      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.TAG }}
          name: "RetroDECK ${{ env.TAG }}"
          body: ${{ steps.generate-body.outputs.RELEASE_BODY }}
          artifacts: "retrodeck-artifacts/**"
          allowUpdates: true
          omitBodyDuringUpdate: true
          makeLatest: ${{ env.MAKE_LATEST }}
          repo: ${{ env.REPO_NAME }}
          token: ${{ steps.generate-rekku-token.outputs.token }}

      # Publish Artifacts
      - name: Publish Artifacts
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.TAG }}
          name: "RetroDECK Artifacts - ${{ env.TAG }}"
          body: "Flathub artifacts for version ${{ env.TAG }}"
          artifacts: "retrodeck-artifacts/RetroDECK-Artifact*.tar.gz,retrodeck-artifacts/RetroDECK-Artifact*.sha"
          allowUpdates: true
          omitBodyDuringUpdate: true
          makeLatest: ${{ env.MAKE_LATEST }}
          repo: Artifacts
          token: ${{ steps.generate-rekku-token.outputs.token }}

      - name: Post PR comment with artifacts
        if: github.event_name == 'pull_request_target' || github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ steps.generate-rekku-token.outputs.token }}
          header: "RetroDECK Build Artifacts"
          message: |
            A build for this `pull request` has been produced.
            Codename: **${{ env.TAG }}**

            Build artifacts can be found [here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifact-retrodeck-artifacts) and they include:
            - RetroDECK Flatpak: `RetroDECK.flatpak`
            - Flatpak file SHA256 checksum: `RetroDECK.flatpak.sha`
            - Flatpak Artifact Bundle: `RetroDECKArtifact.tar.gz`, not useful for testing or end users

      # Rewrite Tag (for Main Branch Only)
      - name: Clone RetroDECK repo
        if: github.ref == 'refs/heads/main'
        uses: actions/checkout@v4
        with:
          submodules: true
          
      - name: Rewrite Tag
        if: github.ref == 'refs/heads/main'
        run: |
          git submodule deinit -f --all
          git fetch --tags
          if git rev-parse --verify "${{ env.TAG }}" >/dev/null 2>&1; then
              git tag -d "${{ env.TAG }}"
              git push --delete origin "${{ env.TAG }}"
          fi
          git tag "${{ env.TAG }}"
          git push origin "${{ env.TAG }}"
        env:
          GITHUB_TOKEN: ${{ steps.generate-rekku-token.outputs.token }}

  # As backup we're even publishing the build on our own selfhosted Fogejo instance
  # Forgejo Publish Job if main branch
  # Forgejo-publish:
  #   runs-on: ubuntu-latest
  #   needs: Build_RetroDECK
  #   env:
  #     TAG: ${{ needs.Build_RetroDECK.outputs.TAG }}
  #     RELEASE_BODY: "${{ needs.Build_RetroDECK.outputs.RELEASE_BODY_FILE }} || No release body found"
  #     MAKE_LATEST: ${{ needs.Build_RetroDECK.outputs.MAKE_LATEST }}
  #   steps:
  #
  #     - name: Download all workflow run artifacts
  #       uses: actions/download-artifact@v4.1.8
  #
  #     - name: Forgejo-publish
  #       if: github.ref == 'refs/heads/main'
  #       uses: RetroDECK/components-template/.github/workflows/fogejo_publish_release.yml@main
  #       with:
  #         release_body: "${{ needs.Build_RetroDECK.outputs.RELEASE_BODY_FILE }} || No release body found"
  #         artifacts: "retrodeck-artifacts/*.flatpak,retrodeck-artifacts/*.flatpak.sha,retrodeck-artifacts/*Artifact.tar.gz"
  #         tag: ${{ env.TAG }}


  # Automated Tests
  Automated_Tests:
    runs-on: ubuntu-latest
    needs: Build_RetroDECK
    continue-on-error: true
      
    steps:

      # Clone Repository
      - name: Clone RetroDECK repo
        uses: actions/checkout@v4
        with:
          submodules: true

      # Download RetroDECK Artifacts
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4.1.8

      # Install Dependencies
      - name: Install dependencies
        run: curl "https://raw.githubusercontent.com/RetroDECK/components-template/main/automation_tools/install_dependencies.sh" | bash

      # Install RetroDECK Flatpak
      - name: Install RetroDECK Flatpak
        continue-on-error: true
        run: |
          ls -lah retrodeck-artifacts
          flatpak install --user --bundle --noninteractive -y "retrodeck-artifacts/RetroDECK"*".flatpak

      # Run Post Build Checks
      - name: Run Post Build Checks
        continue-on-error: true
        run: /bin/bash ./automation_tools/post_build_check.sh

      # Search for Missing Libraries
      - name: Search for Missing Libraries
        continue-on-error: true
        run: /bin/bash ./automation_tools/search_missing_libs.sh
   
      # Uninstall RetroDECK Flatpak - Not needed on a thorwaway ubuntu-latest
      # - name: Uninstall RetroDECK Flatpak
      #   run: |
      #     flatpak remove --user --noninteractive -y net.retrodeck.retrodeck
